#!/bin/bash
#
# Setup Raspberry Pi Pico development environment on Ubuntu Linux
#
# Original Author: John Fredine
# Original Date: March 18, 2025
#

if [[ $USER != "root" ]]; then
    echo "!Error: Script must run as \"sudo $0\""
    exit 1
fi

install_riscv=0
usage="Usage: $0 [--riscv|-v] [--help|-h]"
while [[ $# -gt 0 ]]; do
    case $1 in
    -r|--riscv)
        install_riscv=1
        shift
        ;;
    -h|--help)
        echo "$usage"
        echo "  -r|--riscv -- Additionally install RISC-V tool chain"
        echo "  -h|--help   -- Display this help message"
        exit 0
        ;;
    *)
        echo "!Error: Unknown argument: $1"
        echo $usage
        exit 1
    esac
done

mkdir -p /usr/src

# get latest list of available tools
apt update

# install helpful tools
apt-get install -y picocom tmux

# install ARM toolchain dependencies
apt-get install -y build-essential curl

# install ARM toolchain
cd /usr/src
arm_url="https://developer.arm.com"
version=$(curl -s ${arm_url}/downloads/-/arm-gnu-toolchain-downloads |\
              grep -Po '<h4>Version \K.+(?=</h4>)')
toolchain_url="${arm_url}/-/media/Files/downloads/gnu"
toolchain_url+="/${version}/binrel/arm-gnu-toolchain"
toolchain_url+="-${version}-x86_64-arm-none-eabi.tar.xz"
arm_install_dir=/opt/gcc-arm-none-eabi
curl -Lo gcc-arm-none-eabi.tar.xz $toolchain_url
mkdir -p $arm_install_dir
tar xf gcc-arm-none-eabi.tar.xz --strip-components=1 -C $arm_install_dir

if [[ $install_riscv -eq 1 ]]; then
    # install RISC-V toolchain dependencies
    apt-get install -y autoconf automake autotools-dev curl \
                       python3 python3-pip libmpc-dev \
                       libmpfr-dev libgmp-dev gawk build-essential \
                       bison flex texinfo gperf libtool \
                       patchutils bc zlib1g-dev libexpat-dev \
                       ninja-build git cmake libglib2.0-dev libslirp-dev

    # install RISC-V toolchain
    riscv_install_dir=/opt/gcc-riscv32-unknown-elf
    mkdir -p $riscv_install_dir
    cd /usr/src
    git clone https://github.com/riscv/riscv-gnu-toolchain
    cd riscv-gnu-toolchain
    git clone https://github.com/gcc-mirror/gcc gcc-14 -b releases/gcc-14
    multilib="rv32ima_zicsr_zifencei_zba_zbb_zbs_zbkb_zca_zcb-ilp32--"
    multilib=$multilib";rv32imac_zicsr_zifencei_zba_zbb_zbs_zbkb-ilp32--"
    ./configure --prefix=$riscv_install_dir \
        --with-arch=rv32ima_zicsr_zifencei_zba_zbb_zbs_zbkb_zca_zcb \
        --with-abi=ilp32 \
        --with-multilib-generator=$multilib \
        --with-gcc-src=`pwd`/gcc-14
    make -j$(nproc)
fi

# install raspberry pi pico SDK dependencies
apt-get install -y git

# install raspberry pi pico SDK
rm -rf /opt/pico-sdk
git clone --recurse-submodules -b 2.1.1 \
    https://github.com/raspberrypi/pico-sdk.git /opt/pico-sdk
export PICO_SDK_PATH=/opt/pico-sdk

# install picotool dependencies
apt-get install -y git cmake g++

# install picotool
cd /usr/src
rm -rf picotool
git clone --recurse-submodules -b 2.1.1 \
    https://github.com/raspberrypi/picotool.git
mkdir -p picotool/build
cd picotool/build
cmake ..
make
make install

# install pico examples
cd /usr/src
rm -rf pico-examples
git clone -b sdk-2.1.1 https://github.com/raspberrypi/pico-examples.git

# install build time components for pico
apt update && apt-get install -y python3

echo "Remember to:"
echo "    install and use usbipd in Windows to enable use of USB devices in WSL"
if [[ $install_riscv -eq 1 ]]; then
    echo "    export PATH=\$PATH:$arm_install_dir/bin:$riscv_install_dir/bin"
else
    echo "    export PATH=\$PATH:$arm_install_dir/bin"
fi
echo "    export PICO_SDK_PATH=/opt/pico-sdk"
